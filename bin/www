#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mettletele:server');
var http = require('http');
var socketIO = require('socket.io');
//const socket = require('../socket');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(process.env.PORT || '8080');
console.log('port is : ------------------->' + port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create socket and attach it to port
 */
 var io = socketIO(server, {
  cors: {
    origin: "http://10.68.6.172:8080",
    methods: ["GET", "POST"]
  }
});


io.on('connection', function (socket) {

  socket.emit('greeting-from-server', {
      greeting: 'Hello Client'
  });

  socket.on('greeting-from-client', function (message) {
    console.log(message);
  });

  socket.on('Driver-close-window', function (message){
    console.log('received Driver close window socket signal');
    var txt = message.text;
    socket.broadcast.emit('close',{
      content: 'Navigator-close-window',
      sessname: txt
    });
  });

    socket.on('Driver-scribble-q0', function (message){
    console.log('received Driver-scribble-q0');
    var msg = message.content;
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-scribble-q0',
      text: msg,
      sessname: txt
    });
  });

    socket.on('Driver-about-play', function (message){
    console.log('received Driver-about-play socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-about-play',
      sessname: txt
    });
  });

  socket.on('Driver-about-pause', function (message){
    console.log('received Driver-about-pause socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-about-pause',
      sessname: txt
    });
  });

  socket.on('Driver-about-btn', function (message){
    console.log('received Driver-about-btn socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-about-btn',
      sessname: txt
    });
  });

  socket.on('Driver-about-close', function (message){
    console.log('received Driver-about-close socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-about-close',
      sessname: txt
    });
  });

  socket.on('Driver-information-doc', function (message){
    console.log('received Driver open information doc signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-information-doc',
      sessname: txt
    });
  });

   socket.on('Driver-simulator-open', function (message){
    console.log('received Driver simulator open socket signal');
    var txt = message.text;
   socket.broadcast.emit('open',{
      content: 'Navigator-simulator-open',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-vid1', function (message){
    console.log('received Driver simulator vid1 socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-vid1',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-vid2', function (message){
    console.log('received Driver simulator vid2 socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-vid2',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-hint', function (message){
    console.log('received Driver simulator hint socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-hint',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen2-sel1', function (message){
    console.log('received Driver-simulator-screen2-sel1 socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen2-sel1',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen2-sel2', function (message){
    console.log('received Driver-simulator-screen2-sel2 socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen2-sel2',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen2-sel3', function (message){
    console.log('received Driver-simulator-screen2-sel3 socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen2-sel3',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen2-hint', function (message){
    console.log('received Driver-simulator-screen2-hint socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen2-hint',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen2-back', function (message){
    console.log('received Driver-simulator-screen2-back socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen2-back',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen2-next', function (message){
    console.log('received Driver-simulator-screen2-next socket signal');
    var txt = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen2-next',
       sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-hint', function (message){
    console.log('received Driver-simulator-screen3-hint socket signal');
    var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-hint',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-vid', function (message){
    console.log('received Driver simulator screen3-vid socket signal');
    var txt=message.text;
   socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-vid',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-shape', function (message){
    console.log('received Driver-simulator-screen3-shape socket signal');
    var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-shape',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-mass', function (message){
    console.log('received Driver-simulator-screen3-mass socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-mass',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-acc', function (message){
    console.log('received Driver-simulator-screen3-acc socket signal');
    var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-acc',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-vmax', function (message){
    console.log('received Driver-simulator-screen3-vmax socket signal');
    var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-vmax',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-massDec', function (message){
    console.log('received Driver-simulator-screen3-massDec socket signal');
    var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-massDec',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-massInc', function (message){
    console.log('received Driver-simulator-screen3-massInc socket signal');
    var txt=message.text;
     socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-massInc',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-accDec', function (message){
    console.log('received Driver-simulator-screen3-accDec socket signal');
    var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-accDec',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-accInc', function (message){
    console.log('received Driver-simulator-screen3-accInc socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-accInc',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-shapeDec', function (message){
    console.log('received Driver-simulator-screen3-shapeDec socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-shapeDec',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-shapeInc', function (message){
    console.log('received Driver-simulator-screen3-shapeInc socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-shapeInc',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-vmaxDec', function (message){
    console.log('received Driver-simulator-screen3-vmaxDec socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-vmaxDec',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-vmaxInc', function (message){
    console.log('received Driver-simulator-screen3-vmaxInc socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-vmaxInc',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-back', function (message){
    console.log('received Driver-simulator-screen3-back socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-back',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen3-next', function (message){
    console.log('received Driver-simulator-screen3-next socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen3-next',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen4-hint', function (message){
    console.log('received Driver-simulator-screen4-hint socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen4-hint',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen4-back', function (message){
    console.log('received Driver-simulator-screen4-back socket signal');
     var txt=message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen4-back',
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen4-current-change', function (message){
    console.log('received Driver-simulator-screen4-current-change socket signal');
     var txt=message.text;
    var current = message.val;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen4-current-change',
      text: current,
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen4-voltage-change', function (message){
    console.log('received Driver-simulator-screen4-voltage-change socket signal');
     var txt=message.text;
    var voltage = message.val;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen4-voltage-change',
      text: voltage,
      sessname: txt
    });
  });

  socket.on('Driver-simulator-screen4-motor-change', function (message){
    console.log('received Driver-simulator-screen4-motor-change socket signal');
     var txt=message.text;
    var motor = message.val;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator-screen4-motor-change',
      text: motor,
      sessname: txt
    });
  });

  // socket.on("disconnecting", function (){
  //   console.log('received disconnecting signal');
  //   socket.broadcast.emit('close',{
  //     content: 'Navigator-close-window'
  //   });
  // });

 
  socket.on('Driver-submit-question', function (message){
    console.log('received Driver submit question signal');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-submit-question',
      expln: msg,
      sessname: sess  
    });
  });

  socket.on('Driver-clear-input', function (message){
    console.log('received Driver-clear-input socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-clear-input',
      sessname: sess  
    });
  });

  socket.on('Driver-func-model-main-p0', function (message){
    console.log('received Driver func model main p0 signal');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-model-main-p0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-model-prompt-p0', function (message){
    console.log('received Driver-func-model-prompt-p0 signal');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-model-prompt-p0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-model-prompt-p1', function (message){
    console.log('received Driver-func-model-prompt-p1 signal');
    var msg = message.content;
     var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-model-prompt-p1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-model-prompt-p2', function (message){
    console.log('received Driver-func-model-prompt-p2 signal');
    var msg = message.content;
     var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-model-prompt-p2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-model-prompt-p3', function (message){
    console.log('received Driver-func-model-prompt-p3 signal');
    var msg = message.content;
     var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-model-prompt-p3',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-check-q0', function (message){
    console.log('received Driver-func-eval-check-q0');
    var msg = message.content;
     var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-check-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-check-q1', function (message){
    console.log('received Driver-func-eval-check-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-check-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-dom-q0', function (message){
    console.log('received Driver-func-eval-dom-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-dom-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-dom-q1', function (message){
    console.log('received Driver-func-eval-dom-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-dom-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-dom-q2', function (message){
    console.log('received Driver-func-eval-dom-q2');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-dom-q2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-plan-q0', function (message){
    console.log('received Driver-func-plan-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-plan-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-plan-q1', function (message){
    console.log('received Driver-func-plan-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-plan-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-fail-btn', function (message){
    console.log('received Driver-func-fail-btn socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-fail-btn',
      sessname: sess
    });
  });

  socket.on('Driver-func-fail-close', function (message){
    console.log('received Driver-func-fail-close socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-fail-close',
      sessname: sess
    });
  });

  socket.on('Driver-information', function (message){
    console.log('received Driver information socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-information',
      sessname: sess
    });
  });

  socket.on('Driver-simulator', function (message){
    console.log('received Driver simulator socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-simulator',
      sessname: sess
    });
  });

  socket.on('Driver-scratch', function (message){
    console.log('received Driver scratch socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-scratch',
      sessname: sess
    });
  });

  socket.on('Driver-problem-map', function (message){
    console.log('received Driver problem map socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-problem-map',
      sessname: sess
    });
  });

  socket.on('Driver-problem-log', function (message){
    console.log('received Driver problem log socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-problem-log',
      sessname: sess
    });
  });

  socket.on('Driver-logout', function (message){
    console.log('received Driver logout socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-logout',
      sessname: sess
    });
  });

  socket.on('Driver-calc', function (message){
    console.log('received Driver calculation socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc',
      sessname: sess
    });
  });

  socket.on('Driver-calc-add-data', function (message){
    console.log('received Driver-calc-add-data socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-add-data',
      sessname: sess
    });
  });

  socket.on('Driver-calc-save-data', function (message){
    console.log('received Driver-calc-save-data socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-save-data',
      sessname: sess
    });
  });

  socket.on('Driver-calc-prompt', function (message){
    console.log('received Driver-calc-prompt socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-prompt',
      sessname: sess
    });
  });

  socket.on('Driver-calc-close-modal', function (message){
    console.log('received Driver-close-modal socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-close-modal',
      sessname: sess
    });
  });

  // socket.on('Driver-func', function (){
  //   console.log('received Driver functional socket signal');
  //   socket.broadcast.emit('open',{
  //     content: 'Navigator-func'
  //   });
  // });

  socket.on('Driver-func', function (message){
    //var msg = message.content;
    var sess = message.text;
    console.log('received Driver-func for session'+sess);
    socket.broadcast.emit('open',{
      content: 'Navigator-func',
      //text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-func-eval', function (message){
    console.log('received Driver func eval/check socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval',
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-dom-hint1', function (message){
    console.log('received Driver-func-eval-dom-hint1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-dom-hint1',
      sessname: sess
    });
  });

  socket.on('Driver-func-eval-dom-hint2', function (message){
    console.log('received Driver-func-eval-dom-hint2 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-eval-dom-hint2',
      sessname: sess
    });
  });

  socket.on('Driver-func-model', function (message){
    console.log('received Driver func model socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-model',
      sessname: sess
    });
  });

  socket.on('Driver-func-plan', function (message){
    console.log('received Driver-func-plan socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-plan',
      sessname: sess
    });
  });

  socket.on('Driver-func-dom', function (message){
    console.log('received Driver-func-dom socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-dom',
      sessname: sess
    });
  });

  socket.on('Driver-func-prompt', function (message){
    console.log('received  Driver-func-prompt socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-prompt',
      sessname: sess
    });
  });

  socket.on('Driver-func-fail', function (message){
    console.log('received Driver-func-fail socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-func-fail',
      sessname: sess
    });
  });

  socket.on('Driver-qual', function (message){
    console.log('received Driver qualitative socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual',
      sessname: sess
    });
  });

  socket.on('Driver-qual-model', function (message){
    console.log('received Driver qualitative model load socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-model',
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval', function (message){
    console.log('received Driver-qual-eval socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval',
      sessname: sess
    });
  });

  socket.on('Driver-qual-plan', function (message){
    console.log('received Driver-qual-plan socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-plan',
      sessname: sess
    });
  });

  socket.on('Driver-qual-dom', function (message){
    console.log('received Driver-qual-dom socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-dom',
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-dom-hint', function (message){
    console.log('received Driver-qual-eval-check-hint socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-dom-hint',
      sessname: sess
    });
  });

  socket.on('Driver-qual-plan-hint', function (message){
    console.log('received Driver-qual-plan-hint socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-plan-hint',
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-dom-no1', function (message){
    console.log('received Driver-qual-eval-dom-no1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-dom-no1',
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-dom-yes1', function (message){
    console.log('received Driver-qual-eval-dom-yes1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-dom-yes1',
      sessname: sess
    });
  });

  socket.on('Driver-quant', function (message){
    console.log('received Driver quantitative socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval', function (message){
    console.log('received Driver-quant-eval socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-comp', function (message){
    console.log('received Driver-quant-eval-comp socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-comp',
      sessname: sess
    });
  });

  socket.on('Driver-quant-plan', function (message){
    console.log('received Driver-quant-plan socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-plan',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-check-hint', function (message){
    console.log('received Driver-quant-eval-check-hint socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-hint',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-check-no1', function (message){
    console.log('received Driver-quant-eval-check-no1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-no1',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-check-no2', function (message){
    console.log('received Driver-quant-eval-check-no2 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-no2',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-check-yes1', function (message){
    console.log('received Driver-quant-eval-check-yes1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-yes1',
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-check-yes2', function (message){
    console.log('received Driver-quant-eval-check-yes2 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-yes2',
      sessname: sess
    });
  });
  socket.on('Driver-quant-eval-comp-no1', function (message){
    console.log('received Driver-quant-eval-comp-no1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-comp-no1',
      sessname: sess
    });
  });
  socket.on('Driver-quant-eval-comp-no2', function (message){
    console.log('received Driver-quant-eval-comp-no2 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-comp-no2',
      sessname: sess
    });
  });
  socket.on('Driver-quant-eval-comp-yes1', function (message){
    console.log('received Driver-quant-eval-comp-yes1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-comp-yes1',
      sessname: sess
    });
  });
  socket.on('Driver-quant-eval-comp-yes2', function (message){
    console.log('received Driver-quant-eval-comp-yes2 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-comp-yes2',
      sessname: sess
    });
  });

  socket.on('Driver-calc-param', function (message){
    console.log('received Driver-calc-param');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-param',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-calc-val', function (message){
    console.log('received Driver-calc-val');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-val',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-calc-arg', function (message){
    console.log('received Driver-calc-arg');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-arg',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-calc-q0', function (message){
    console.log('received Driver-calc-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-calc-deletedata', function (message){
    console.log('received Driver-calc-deletedata');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-calc-deletedata',
      text: msg,
      sessname: sess
    });
  });
  
  socket.on('Driver-quant-model-q0', function (message){
    console.log('received Driver-quant-model-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-model-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-quant-plan-q0', function (message){
    console.log('received DDriver-quant-plan-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-plan-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-quant-plan-q1', function (message){
    console.log('received Driver-quant-plan-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-plan-q1',
      text: msg,
      sessname: sess
    });
  });
  
  socket.on('Driver-quant-eval-check-q0', function (message){
    console.log('received Driver-quant-eval-check-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-check-q0', function (message){
    console.log('received Driver-qual-eval-check-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-check-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-check-q1', function (message){
    console.log('received Driver-qual-eval-check-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-check-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-check-q2', function (message){
    console.log('received Driver-qual-eval-check-q2');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-check-q2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-check-q3', function (message){
    console.log('received Driver-qual-eval-check-q3');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-check-q3',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-plan-q0', function (message){
    console.log('received Driver-qual-plan-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-plan-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-plan-q1', function (message){
    console.log('received Driver-qual-plan-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-plan-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-plan-q2', function (message){
    console.log('received Driver-qual-plan-q2');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-plan-q2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-dom-q0', function (message){
    console.log('received Driver-qual-eval-dom-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-dom-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-qual-eval-dom-q1', function (message){
    console.log('received Driver-qual-eval-dom-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-qual-eval-dom-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-check-q2', function (message){
    console.log('received Driver-quant-eval-check-q2');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-check-q2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-quant-eval-comp-q2', function (message){
    console.log('received Driver-quant-eval-comp-q2');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-quant-eval-comp-q2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-q0', function (message){
    console.log('received Driver-eval-q0');
    var msg = message.content;
    var sess= message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-q1', function (message){
    console.log('received Driver-eval-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval', function (message){
    console.log('received Driver evaluate socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval',
      sessname: sess
    });
  });

  socket.on('Driver-eval-map-q0', function (message){
    console.log('received Driver-eval-map-q0');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-map-q0',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-map-q1', function (message){
    console.log('received Driver-eval-map-q1');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-map-q1',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-map-q2', function (message){
    console.log('received Driver-eval-map-q2');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-map-q2',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-map-q3', function (message){
    console.log('received Driver-eval-map-q3');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-map-q3',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-map-q4', function (message){
    console.log('received Driver-eval-map-q4');
    var msg = message.content;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-map-q4',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-check-complete', function (message){
    console.log('received Driver-eval-check-complete socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-check-complete',
      sessname: sess
    });
  });

  socket.on('Driver-eval-check-incomplete', function (message){
    console.log('received Driver-eval-check-incomplete socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-check-incomplete',
      sessname: sess
    });
  });

  socket.on('Driver-eval-submit', function (message){
    console.log('received Driver-eval-submit socket signal with '+message.content);
    var sess = message.text;
    var msg = message.content;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-submit',
      text: msg,
      sessname: sess
    });
  });

  socket.on('Driver-eval-hint1', function (message){
    console.log('received Driver-eval-hint1 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-hint1',
      sessname: sess
    });
  });

  socket.on('Driver-eval-hint2', function (message){
    console.log('received Driver-eval-hint2 socket signal');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-eval-hint2',
      sessname: sess
    });
  });

  socket.on('Driver-next', function (message){
    console.log('next is :' + message.nexturl);
    var url = message.nexturl;
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-next',
      nexturl: url,
      sessname: sess
    });
  });

  socket.on('Driver-done', function (message){
    console.log('finished reflection');
    var sess = message.text;
    socket.broadcast.emit('open',{
      content: 'Navigator-done',
      sessname: sess
    });
  });


});




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

import { RequestHandler } from 'express';
import { Authorized } from '../types/jwt';
import sessionModel from '../models/sessionSchema';
import sessionDetailsModels from '../models/sessionDetailsSchema';
import { IError } from '../types/IError';
/**
 * @api {post} /session/create Create session
 * @apiName createSession
 * @apiGroup Session
 *
 * @apiBody {String} sessionName name of the session
 * @apiSuccess {String} sessionId Id of the session created with mongodb
 *
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       "sessionID":"ydsfusvcedewg2632egdvcdc"
 *     }
 * @apiHeader {String} Authorization JWT token generated by the server
 * @apiHeaderExample {json} Token-example
 * 		{
 * 			"Authorization":"Bearer srfv27635retdyucj2beyruhcbdhf"
 * 		}
 */
export const createSession: RequestHandler = async (
	req: Authorized,
	res,
	next,
) => {
	try {
		const creator = req.user?.id;
		const sessionName = req.body.sessionName;
		const session = new sessionModel({ creator, sessionName });
		const sessionDetails = new sessionDetailsModels({
			sessionID: session._id,
			userOne: {
				userId: creator,
				userRole: 'Driver',
				userStatus: 'offline',
			},
		});
		await session.save();
		await sessionDetails.save();
		res.status(200).json({ sessionId: session._id });
	} catch (error) {
		next(error);
	}
};
/**
 * @api {get} /session/details Get session Details
 * @apiName getSessionDetails
 * @apiGroup Session
 *
 * @apiQuery {String} sessionId name of the session
 * @apiSuccess {Object} session Session details object
 *
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *      {
 * 			"session":{
 * 					"userOne":{
 * 								"userRole":"Driver",
 * 								"userId":"xcgh65rdcvbn"
 * 							  }
 * 					  },
 * 					"userTwo":{
 * 								"userRole":"Navigator",
 * 								"userId":"trduhhiugibhb"
 * 							  }
 * 					  },
 * 					"notepad":"These are some test notes taken by the students",
 * 					"state":"Click to continue"
 * 		}
 * @apiHeader {String} Authorization JWT token generated by the server
 * @apiHeaderExample {json} Token-example
 * 		{
 * 			"Authorization":"Bearer srfv27635retdyucj2beyruhcbdhf"
 * 		}
 */
export const getSessionDetails: RequestHandler = async (
	req: Authorized,
	res,
	next,
) => {
	try {
		const sessionId = req.query.sessionId;
		const session = await sessionDetailsModels.find({
			sessionID: sessionId,
		});
		if (session.length === 0) {
			throw new IError('Invalid sessionId', 404);
		}
		res.status(200).json(session);
	} catch (error) {
		next(error);
	}
};
/**
 * @api {get} /session/list Get all sessions
 * @apiName listAllSessions
 * @apiGroup Session
 *
 * @apiSuccess {Array} session Array of objects of all sessions
 *
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *      [{
 * 			"sessions":{
 * 					"userOne":{
 * 								"userRole":"Driver",
 * 								"userId":"xcgh65rdcvbn"
 * 							  }
 * 					  },
 * 					"userTwo":{
 * 								"userRole":"Navigator",
 * 								"userId":"trduhhiugibhb"
 * 							  }
 * 					  },
 * 					"notepad":"These are some test notes taken by the students",
 * 					"state":"Click to continue"
 * 		}]
 * @apiHeader {String} Authorization JWT token generated by the server
 * @apiHeaderExample {json} Token-example
 * 		{
 * 			"Authorization":"Bearer srfv27635retdyucj2beyruhcbdhf"
 * 		}
 */
export const listAllSessions: RequestHandler = async (
	req: Authorized,
	res,
	next,
) => {
	try {
		const userId = req.user?.id;
		const sessions = await sessionDetailsModels
			.find({
				$or: [
					{ 'userOne.userId': userId },
					{ 'userTwo.userId': userId },
				],
			})
			.populate('sessionID');
		res.status(200).json(sessions);
	} catch (error) {
		next(error);
	}
};
/**
 * @api {delete} /session/delete Delete a session
 * @apiName deleteSession
 * @apiGroup Session
 *
 * @apiSuccess {String} message Response message indicating success
 *
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *      {
 * 			"message":"success"
 * 		}
 * @apiError DeleteError Only the creator can delete the session
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 401 Unauthorized
 *     {
 *       "message": "Only the creator can delete the session"
 *     }
 * @apiHeader {String} Authorization JWT token generated by the server
 * @apiHeaderExample {json} Token-example
 * 		{
 * 			"Authorization":"Bearer srfv27635retdyucj2beyruhcbdhf"
 * 		}
 * @apiQuery {String} sessionId Session ID of the session to be deleted
 */
export const deleteSession: RequestHandler = async (
	req: Authorized,
	res,
	next,
) => {
	try {
		const sessionId = req.query.sessionId;
		const session = await sessionModel.findById(sessionId);
		if (session?.creator != req.user?.id) {
			throw new IError('Only the creator can delete the session', 401);
		}
		await sessionModel.findByIdAndDelete(sessionId);
		await sessionDetailsModels.findOneAndDelete({ sessionID: sessionId });
		res.status(200).json({ message: 'Success' });
	} catch (error) {
		next(error);
	}
};

export const getStatus: RequestHandler = async (req: Authorized, res, next) => {
	const sessionId = req.query.sessionId;
	const session = await sessionDetailsModels.findOne({
		sessionID: sessionId,
	});
	if (!session) {
		return res.status(404).json({ message: 'Session not found' });
	}
	if (
		session.userOne.userStatus === 'online' &&
		session.userTwo.userStatus === 'online'
	) {
		res.status(200).json({ status: 'online', session });
	} else {
		res.status(200).json({ status: 'offline' });
	}
};

export const saveNotes: RequestHandler = async (req: Authorized, res, next) => {
	const sessionId = req.query.sessionId;
	const notes = req.body.notes;
	await sessionDetailsModels.findOneAndUpdate(
		{ sessionID: sessionId },
		{ $set: { notepad: notes } },
	);
	res.status(200).json({ message: 'notes saved' });
};
